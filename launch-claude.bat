@echo off
setlocal enabledelayedexpansion

REM ===== SCRIPT CLAUDE CODE LAUNCHER =====
REM Lance Claude Code et g√®re la sauvegarde du contexte

echo ========================================
echo    CLAUDE CODE PROJECT LAUNCHER
echo ========================================
echo.

REM Cr√©er le dossier de sauvegarde s'il n'existe pas
if not exist ".claude-context" mkdir ".claude-context"

REM Obtenir la date et heure actuelles
for /f "tokens=2 delims==" %%a in ('wmic OS Get localdatetime /value') do set "dt=%%a"
set "YY=%dt:~2,2%" & set "YYYY=%dt:~0,4%" & set "MM=%dt:~4,2%" & set "DD=%dt:~6,2%"
set "HH=%dt:~8,2%" & set "Min=%dt:~10,2%" & set "Sec=%dt:~12,2%"
set "timestamp=%YYYY%-%MM%-%DD%_%HH%-%Min%-%Sec%"

REM Sauvegarder le contexte actuel avant de lancer Claude
echo [%timestamp%] === SESSION START === >> .claude-context\session-log.txt
echo Dossier de travail: %CD% >> .claude-context\session-log.txt
echo.

REM V√©rifier s'il y a un contexte pr√©c√©dent
if exist ".claude-context\project-context.txt" (
    echo CONTEXTE PROJET TROUVE :
    echo ========================
    type ".claude-context\project-context.txt"
    echo.
    echo ========================
    echo.
) else (
    echo Aucun contexte pr√©c√©dent trouv√©.
    echo.
)

REM V√©rifier la biblioth√®que de modules
echo BIBLIOTHEQUE DE MODULES :
echo ========================
if exist "C:\EmmanuelModules\module-registry.json" (
    echo ‚úÖ Biblioth√®que de modules trouv√©e sur C:\EmmanuelModules\
    echo    üìã Tapez 'C:\EmmanuelModules\list-modules.bat' pour voir les modules
    echo    üîß Modules disponibles pour ce projet
) else (
    echo ‚ö†Ô∏è  Biblioth√®que de modules non trouv√©e
    echo    üí° Cr√©ez-la avec: mkdir C:\EmmanuelModules
)

echo.
echo ANALYSE DU PROJET :
echo ===================
if exist "package.json" (
    echo - Projet Node.js d√©tect√©
    echo   ^> package.json trouv√©
)
if exist "*.html" (
    echo - Fichiers HTML d√©tect√©s
    for %%f in (*.html) do echo   ^> %%f
)
if exist "*.js" (
    echo - Fichiers JavaScript d√©tect√©s
)
if exist "manifest.json" (
    echo - Application web d√©tect√©e (manifest.json)
)

echo.
echo LANCEMENT DE CLAUDE CODE...
echo Tapez 'exit' pour quitter et sauvegarder le contexte
echo.

REM Cr√©er un prompt initial pour Claude avec le contexte
(
echo CONTEXTE DU PROJET :
echo ====================
echo Dossier: %CD%
echo Timestamp: %timestamp%
echo.
echo PREFERENCES DE DESIGN D'EMMANUEL :
echo ================================
echo - Style visuel : Th√®me pur blanc, g√©om√©trique, simple mais d√©taill√©
echo - Esth√©tique : Futuriste, √©pur√©, lignes nettes
echo - Narration : Toujours √† la 3√®me personne pour l'immersion
echo - Ambiance : Moderne, technologique, immersive
echo.
echo SPECIFICATIONS TECHNIQUES :
echo ===========================
echo - Interface : Une seule fen√™tre, tout dedans
echo - Contr√¥les : Mobile tactile + souris PC
echo - Format : Ratio fixe, orientation portrait
echo - Responsive : Adaptation mobile/desktop
echo.
echo ARCHITECTURE MODULAIRE :
echo ========================
echo - Fonctions en modules d√©sactivables facilement
echo - Modules stables r√©utilisables entre projets
echo - Architecture plug-and-play
echo - S√©paration claire des responsabilit√©s
echo.
echo STRUCTURE MODULAIRE IMPLEMENTEE :
echo =================================
echo - modules/graphics/ : Rendus graphiques (bateau, c≈ìurs, lanterne, environnement)
echo - modules/systems/ : Syst√®mes de jeu (particules, animations)
echo - modules/config/ : Configuration centralis√©e
echo - modules/styles/ : Styles CSS r√©utilisables
echo - modules/index.js : Gestionnaire central ModuleManager
echo.
echo METHODE MODULAIRE :
echo ==================
echo 1. Isoler chaque composant graphique en module ind√©pendant
echo 2. Cr√©er des syst√®mes r√©utilisables (particules, animations)
echo 3. Centraliser la configuration dans game-config.js
echo 4. S√©parer les styles CSS en fichiers modulaires
echo 5. Gestionnaire central pour import/export facile
echo 6. Version d√©mo modulaire : voir-la-verite-modular.html
echo 7. Documentation compl√®te : README-MODULES.md
echo 8. Hot-reload automatique pour d√©veloppement rapide
echo 9. Tests unitaires par module (modules/tests/)
echo 10. Build system pour optimisation production
echo.
if exist ".claude-context\project-context.txt" (
    echo CONTEXTE PRECEDENT :
    type ".claude-context\project-context.txt"
    echo.
)
echo FICHIERS PRINCIPAUX :
dir /b *.html *.js *.json 2>nul
echo.
echo MODULES DISPONIBLES :
echo ====================
if exist "modules\" (
    echo ‚úÖ Architecture modulaire d√©tect√©e
    echo üìÅ modules/graphics/ - Rendus graphiques
    echo üìÅ modules/systems/ - Syst√®mes de jeu
    echo üìÅ modules/config/ - Configuration
    echo üìÅ modules/styles/ - Styles CSS
    if exist "modules\index.js" echo üì¶ ModuleManager disponible
    if exist "voir-la-verite-modular.html" echo üéÆ Version d√©mo modulaire disponible
    if exist "README-MODULES.md" echo üìñ Documentation modulaire disponible
) else (
    echo ‚ö†Ô∏è Modules non d√©tect√©s - Architecture monolithique
)
echo.
echo QUE DOIS-JE FAIRE DANS CE PROJET ?
) > ".claude-context\current-prompt.txt"

REM Sauvegarde automatique avant changements
echo.
echo üíæ SAUVEGARDE AUTOMATIQUE AVANT CHANGEMENTS...
call sauvegarde-auto.bat
echo ‚úÖ Sauvegarde termin√©e !
echo.

REM Lancer Claude Code
claude

REM Apr√®s fermeture de Claude, g√©n√©rer un rapport intelligent
echo.
echo ========================================
echo   RAPPORT DE SESSION CLAUDE CODE
echo ========================================
echo.

REM Analyser les changements dans le projet
echo ANALYSE DES MODIFICATIONS:
echo ==========================
set "files_changed=0"

REM D√©tecter les nouveaux fichiers cr√©√©s aujourd'hui
echo üìÑ NOUVEAUX FICHIERS:
for %%f in (*.html *.js *.css *.json *.txt *.md) do (
    if exist "%%f" (
        forfiles /m "%%f" /c "cmd /c if @fdate gtr %YYYY%-%MM%-%DD% echo   ‚ú® NOUVEAU: %%f" 2>nul
        set /a files_changed+=1
    )
)

REM D√©tecter les fichiers modifi√©s
echo üìù FICHIERS MODIFIES:
for %%f in (*.html *.js *.css *.json *.txt *.md) do (
    if exist "%%f" (
        forfiles /m "%%f" /c "cmd /c if @fdate equ %YYYY%-%MM%-%DD% echo   üìù MODIFIE: %%f" 2>nul
    )
)

REM Analyser la taille du projet
echo üìä STATISTIQUES PROJET:
dir *.* /s /-c | find "File(s)" | find /v "Dir(s)"

REM D√©tecter les erreurs potentielles
echo üîç VERIFICATION RAPIDE:
if exist "*.html" (
    findstr /i "error\|undefined\|null" *.html >nul 2>nul && echo   ‚ö†Ô∏è  Erreurs potentielles d√©tect√©es dans HTML
)
if exist "*.js" (
    findstr /i "console.error\|throw\|undefined" *.js >nul 2>nul && echo   ‚ö†Ô∏è  Erreurs potentielles d√©tect√©es dans JS
)

echo.
echo COLLECTE DU CONTEXTE:
echo =====================
echo 1. Que faisiez-vous dans ce projet ?
set /p "task_description=   Description: "

echo.
echo 2. Statut de la t√¢che:
echo    [C] Compl√®te   [P] En cours   [B] Bloqu√©e   [A] Abandonn√©e
set /p "task_status=   Statut (C/P/B/A): "

if /i "%task_status%"=="P" (
    echo.
    echo 3. Pourquoi pas termin√© ?
    set /p "blocker=   Raison: "
    echo.
    echo 4. Prochaines √©tapes pour continuer:
    set /p "next_steps=   √âtapes: "
) else if /i "%task_status%"=="B" (
    echo.
    echo 3. Qu'est-ce qui bloque ?
    set /p "blocker=   Blocage: "
    echo.
    echo 4. Comment d√©bloquer ?
    set /p "solution=   Solution: "
    set "next_steps=BLOQUE: !blocker! - Solution: !solution!"
) else if /i "%task_status%"=="C" (
    echo.
    echo 3. Prochaines fonctionnalit√©s √† ajouter ?
    set /p "next_steps=   Nouvelles id√©es: "
    set "blocker=Aucun"
) else (
    echo.
    echo 3. Pourquoi abandonn√© ?
    set /p "blocker=   Raison: "
    set "next_steps=ABANDONNE: !blocker!"
)

echo.
echo 5. Id√©es/am√©liorations not√©es pendant la session:
set /p "ideas=   Id√©es: "

echo.
echo 6. Fonctions utiles d√©couvertes (ex: raccourcis, astuces):
set /p "useful_functions=   Fonctions: "

echo.
echo 7. Modules/composants cr√©√©s ou modifi√©s:
set /p "modules_work=   Modules: "

echo.
echo 8. Performance/optimisations apport√©es:
set /p "optimizations=   Optimisations: "

echo.
echo 9. Bugs d√©couverts/r√©solus:
set /p "bugs=   Bugs: "

echo.
echo GENERATION DU RAPPORT...

REM D√©terminer les suggestions intelligentes bas√©es sur le projet
set "suggestions="
if exist "*.html" set "suggestions=!suggestions! [HTML] Optimisation responsive, animations CSS, SEO"
if exist "*.js" set "suggestions=!suggestions! [JS] Modules ES6, gestion erreurs, tests unitaires, minification"
if exist "package.json" set "suggestions=!suggestions! [NODE] Scripts npm, d√©pendances, build, d√©ploiement"
if exist "manifest.json" set "suggestions=!suggestions! [PWA] Service Worker, cache offline, notifications push, ic√¥nes"
if exist "*.css" set "suggestions=!suggestions! [CSS] Variables CSS, grid/flexbox, media queries, animations"
if exist "sw*.js" set "suggestions=!suggestions! [SW] Cache strategies, background sync, push notifications"
if exist "*test*" set "suggestions=!suggestions! [TEST] Coverage, CI/CD, tests e2e, mocking"
if exist "*debug*" set "suggestions=!suggestions! [DEBUG] Console, breakpoints, performance profiling"

REM Suggestions bas√©es sur les fichiers r√©cents et pr√©f√©rences d'Emmanuel
if /i "%task_description%"=="mobile" set "suggestions=!suggestions! [MOBILE] Touch events, viewport, orientation"
if /i "%task_description%"=="game" set "suggestions=!suggestions! [GAME] Canvas, animations, physics, audio"
if /i "%task_description%"=="api" set "suggestions=!suggestions! [API] Fetch, async/await, error handling, caching"

REM Suggestions de design selon les pr√©f√©rences d'Emmanuel
set "suggestions=!suggestions! [DESIGN] Th√®me blanc pur, g√©om√©trie simple, d√©tails fins"
set "suggestions=!suggestions! [UX] Interface futuriste, √©pur√©e, navigation intuitive"
set "suggestions=!suggestions! [NARRATION] 3√®me personne, immersion, ambiance technologique"
set "suggestions=!suggestions! [LAYOUT] Single-page app, ratio portrait fixe, responsive"
set "suggestions=!suggestions! [CONTROLS] Touch events, mouse support, unified interface"
set "suggestions=!suggestions! [MODULES] Architecture modulaire, plug-and-play, d√©sactivables"
set "suggestions=!suggestions! [CODE] Modules r√©utilisables, config centralis√©e, hot-reload"
set "suggestions=!suggestions! [GRAPHICS] BoatRenderer, HeartRenderer, LanternRenderer, EnvironmentRenderer"
set "suggestions=!suggestions! [SYSTEMS] ParticleSystem collections, ModuleManager centralis√©"
set "suggestions=!suggestions! [CONFIG] GameConfig centralis√©, RESPONSIVE calculations, COLORS palettes"
set "suggestions=!suggestions! [DEMO] voir-la-verite-modular.html, README-MODULES.md documentation"
set "suggestions=!suggestions! [PERFORMANCE] Canvas optimizations, requestAnimationFrame, memory management"
set "suggestions=!suggestions! [AUDIO] Web Audio API, sound effects, background music, audio modules"
set "suggestions=!suggestions! [ANIMATION] CSS keyframes, JS tweening, particle effects, smooth transitions"
set "suggestions=!suggestions! [DATA] LocalStorage persistence, JSON config, save/load system"
set "suggestions=!suggestions! [DEBUG] Console logging, performance monitoring, error tracking"
set "suggestions=!suggestions! [DEPLOY] GitHub Pages, Netlify, PWA manifest, service worker"
set "suggestions=!suggestions! [TOOLS] ESLint, Prettier, bundler, live server, auto-reload"
set "suggestions=!suggestions! [SECURITY] Input validation, XSS protection, content security policy"

REM G√©n√©rer le rapport complet
(
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    RAPPORT DE SESSION                        ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo üìÖ SESSION: %timestamp%
echo üóÇÔ∏è  PROJET: %CD%
echo.
echo ‚îå‚îÄ TRAVAIL EFFECTUE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
echo ‚îÇ TACHE: %task_description%
if /i "%task_status%"=="C" echo ‚îÇ ‚úÖ STATUT: COMPLETE
if /i "%task_status%"=="P" echo ‚îÇ ‚è≥ STATUT: EN COURS
if /i "%task_status%"=="B" echo ‚îÇ ‚ùå STATUT: BLOQUEE
if /i "%task_status%"=="A" echo ‚îÇ ‚õî STATUT: ABANDONNEE
if not "%blocker%"=="Aucun" echo ‚îÇ üö´ PROBLEME: %blocker%
echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
echo.
if /i "%task_status%"=="P" (
    echo ‚îå‚îÄ PROCHAINES ETAPES (PRIORITE) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ üéØ %next_steps%
    echo ‚îÇ üìã TODO: Reprendre cette t√¢che en priorit√©
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
) else if /i "%task_status%"=="B" (
    echo ‚îå‚îÄ BLOCAGE A RESOUDRE (URGENT) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ üö® %next_steps%
    echo ‚îÇ üìã TODO: R√©soudre ce blocage avant tout
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
) else (
    echo ‚îå‚îÄ PROCHAINES IDEES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ üí° %next_steps%
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
)
echo.
if not "%ideas%"=="" (
    echo ‚îå‚îÄ IDEES NOTEES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ üß† %ideas%
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    echo.
)
if not "%useful_functions%"=="" (
    echo ‚îå‚îÄ FONCTIONS UTILES DECOUVERTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ üîß %useful_functions%
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    echo.
)
if not "%modules_work%"=="" (
    echo ‚îå‚îÄ MODULES/COMPOSANTS TRAVAILLES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ üì¶ %modules_work%
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    echo.
)
if not "%optimizations%"=="" (
    echo ‚îå‚îÄ OPTIMISATIONS APPORTEES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ ‚ö° %optimizations%
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    echo.
)
if not "%bugs%"=="" (
    echo ‚îå‚îÄ BUGS DECOUVERTS/RESOLUS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ üêõ %bugs%
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    echo.
)
if not "%suggestions%"=="" (
    echo ‚îå‚îÄ SUGGESTIONS INTELLIGENTES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    echo ‚îÇ ü§ñ %suggestions%
    echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    echo.
)
echo ‚îå‚îÄ FICHIERS MODIFIES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
forfiles /m *.* /c "cmd /c echo ‚îÇ üìù @path - @fdate @ftime" 2>nul | findstr "%YYYY%-%MM%-%DD%"
echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
echo.
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
) > ".claude-context\project-context.txt"

echo [%timestamp%] T√¢che: %task_description% >> .claude-context\session-log.txt
echo [%timestamp%] Statut: %task_status% >> .claude-context\session-log.txt
echo [%timestamp%] Prochaines √©tapes: %next_steps% >> .claude-context\session-log.txt
if not "%modules_work%"=="" echo [%timestamp%] Modules: %modules_work% >> .claude-context\session-log.txt
if not "%optimizations%"=="" echo [%timestamp%] Optimisations: %optimizations% >> .claude-context\session-log.txt
if not "%bugs%"=="" echo [%timestamp%] Bugs: %bugs% >> .claude-context\session-log.txt
echo [%timestamp%] === SESSION END === >> .claude-context\session-log.txt
echo.

echo ‚úÖ Rapport g√©n√©r√© dans .claude-context\project-context.txt
echo üìã Session archiv√©e dans .claude-context\session-log.txt

REM Jouer un son de fin si possible (Windows)
powershell -c "[console]::beep(800,300); [console]::beep(1000,200)" 2>nul

REM Afficher un r√©sum√© rapide des prochaines actions
echo.
echo üéØ RESUME POUR LA PROCHAINE SESSION:
if /i "%task_status%"=="P" (
    echo    ‚ö†Ô∏è  REPRENDRE: %task_description%
    echo    üìù ETAPES: %next_steps%
) else if /i "%task_status%"=="B" (
    echo    üö® URGENT: R√©soudre le blocage
    echo    üîß ACTION: %next_steps%
) else if /i "%task_status%"=="C" (
    echo    ‚úÖ T√¢che termin√©e
    echo    üí° IDEES: %next_steps%
) else (
    echo    ‚õî T√¢che abandonn√©e
)

echo.
echo üíæ Utilisez 'launch-claude.bat' pour reprendre avec le contexte
echo.
pause