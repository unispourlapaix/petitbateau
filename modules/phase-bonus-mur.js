// Phase Bonus - Le Mur dans la Mer
class PhaseBonusMur {
    constructor(gameState) {
        this.gameState = gameState;
        this.canvas = null;
        this.ctx = null;
        this.initialized = false;

        // √âtat de la phase bonus - Les 6 parties du Mur d'avare\rit
        this.phaseData = {
            id: 'VDV_BONUS_MUR_AVARIE',
            titre: '√âpilogue ‚Äî LE MUR d\'avare\\rit',
            parties: [
                {
                    id: 'P1',
                    texte: `üí≠ "Au loin‚Ä¶ je vois un mur.
Un mur dress√© dans la mer comme une cicatrice.
Un mur qui n'est pas fait de pierres,
mais de lois, de papiers et de regards ferm√©s."`
                },
                {
                    id: 'P2',
                    texte: `üí≠ "Ce mur est la prison de la libert√© des hommes.
Il s√©pare ceux qui peuvent courir sans cha√Ænes,
et ceux qu'on enferme dans des fronti√®res invisibles."`
                },
                {
                    id: 'P3',
                    texte: `üí≠ "Pour les pauvres, il est barbel√© de refus,
ferm√© comme une porte rouill√©e.
Ils y frappent de leurs mains nues,
leurs r√™ves bris√©s par le silence des gardiens."`
                },
                {
                    id: 'P4',
                    texte: `üí≠ "Pour les riches, il est une porte d'or.
Elle s'ouvre sans effort,
et les laisse circuler comme le vent qui n'a pas de patrie."`
                },
                {
                    id: 'P5',
                    texte: `üí≠ "Alors je me demande‚Ä¶
La libert√© est-elle vraiment un droit,
ou est-elle devenue un privil√®ge vendu aux plus offrants ?"`
                },
                {
                    id: 'P6',
                    texte: `üí≠ "Mais dans le c≈ìur des vagues,
la mer murmure une v√©rit√© :
aucun mur n'est √©ternel.
Car l'eau finit toujours par user la pierre,
et la libert√©, t√¥t ou tard,
reprendra son chemin."`
                },
                {
                    id: '√âPILOGUE',
                    texte: `üí≠ "Ce mur se dresse, orgueilleux,
fait de briques vol√©es √† l'espoir,
de ciment arrach√© aux r√™ves,
de poutres qui auraient pu abriter des vies.

C'est nous, par nos silences et nos maux,
par nos peurs murmur√©es,
par nos mots jet√©s comme pierres,
qui le rendons plus solide.

C'est un mur d'√©go√Øsme,
construit avec ce qui aurait pu √™tre des toits,
des refuges, des foyers.

L'humanit√© n'a pas besoin de murs pour se prot√©ger,
mais de ponts pour se rencontrer.
Construisons avec amour, pas avec peur.
Un monde uni vaut mieux qu'un monde cloisonn√©."

‚ú® LE MUR S'EFFRITE D√âFINITIVEMENT ‚ú®`
                }
            ],
            duree: 45000, // 45 secondes
            rewardXP: 200
        };

        this.showingBonus = false;
        this.startTime = 0;
        this.textAnimator = null;
        this.waveAnimation = 0;
        this.currentPartie = 0; // Index de la partie actuelle (0-6 pour P1-P6+√âPILOGUE)
        this.partieStartTime = 0;
        this.partieDuration = 7000; // 7 secondes par partie (sauf √©pilogue)
    }

    init(canvas, ctx) {
        this.canvas = canvas;
        this.ctx = ctx;
        this.initialized = true;
        this.setupTextAnimator();
        console.log('Phase Bonus - Le Mur dans la Mer initialis√©e');
    }

    setupTextAnimator() {
        this.textAnimator = {
            currentText: '',
            targetText: '',
            charIndex: 0,
            isAnimating: false,
            speed: 15, // Plus lent pour un effet contemplatif

            startAnimation(text, speed = 15) {
                this.targetText = text;
                this.currentText = '';
                this.charIndex = 0;
                this.isAnimating = true;
                this.speed = speed;
            },

            update() {
                if (!this.isAnimating) return false;

                if (this.charIndex < this.targetText.length) {
                    if (Date.now() % this.speed < 16) {
                        this.currentText += this.targetText[this.charIndex];
                        this.charIndex++;
                    }
                    return true;
                } else {
                    this.isAnimating = false;
                    return false;
                }
            }
        };
    }

    // D√©marrer la phase bonus
    start() {
        if (!this.initialized) return;

        this.showingBonus = true;
        this.startTime = Date.now();

        // Afficher le message d'introduction
        const message = document.querySelector('.message');
        if (message) {
            message.innerHTML = `
                <div style="text-align: center; background: linear-gradient(135deg, #1e3c72, #2a5298); padding: 20px; border-radius: 10px;">
                    <h2 style="margin-bottom: 20px; color: #ffffff; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">üåä Phase Bonus D√©bloqu√©e üåä</h2>
                    <p style="color: #e3f2fd; margin-bottom: 20px;">
                        Vous avez termin√© votre voyage de v√©rit√©.<br>
                        Voici une r√©flexion finale sur notre monde...
                    </p>
                    <p style="color: #ffd700; font-size: 14px; margin: 10px 0;">
                        üåü +200 XP pour avoir compl√©t√© le jeu ! üåü
                    </p>
                    <button class="message-button" onclick="window.phaseBonusMur.startBonusPoem()"
                            style="background: linear-gradient(145deg, #4caf50, #45a049); margin-top: 15px;">
                        Lire l'√©pilogue po√©tique
                    </button>
                </div>
            `;
            message.style.display = 'block';
        }

        // Le bonus XP est maintenant g√©r√© par le jeu principal

        console.log('Phase Bonus - D√©marrage de l\'√©pilogue');
    }

    // Commencer le po√®me en 6 parties
    startBonusPoem() {
        // Masquer le message d'introduction
        const message = document.querySelector('.message');
        if (message) {
            message.style.display = 'none';
        }

        // D√©marrer avec la premi√®re partie (P1)
        this.currentPartie = 0;
        this.partieStartTime = Date.now();
        this.startCurrentPartie();
        console.log('Phase Bonus - D√©but des 6 parties du Mur d\'avare\\rit');
    }

    // D√©marrer l'affichage de la partie actuelle
    startCurrentPartie() {
        if (this.currentPartie >= this.phaseData.parties.length) {
            this.completeBonus();
            return;
        }

        const partie = this.phaseData.parties[this.currentPartie];
        console.log(`üìñ Affichage ${partie.id}: ${partie.texte.substring(0, 50)}...`);

        // D√©marrer l'animation du texte de cette partie
        this.textAnimator.startAnimation(partie.texte, 20);
        this.partieStartTime = Date.now();
    }

    // Setup visuel du canvas pour la phase bonus
    setupCanvas() {
        if (!this.canvas || !this.ctx) return;

        // Animation des vagues
        this.waveAnimation += 0.02;

        // Fond d√©grad√© mer et ciel
        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
        gradient.addColorStop(0, '#87CEEB'); // Bleu ciel
        gradient.addColorStop(0.6, '#4682B4'); // Bleu acier
        gradient.addColorStop(1, '#191970'); // Bleu nuit

        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Dessiner le mur dans la mer
        this.drawSeaWall();

        // Titre de la phase avec num√©ro de partie
        this.ctx.fillStyle = '#ffffff';
        this.ctx.font = 'bold 20px serif';
        this.ctx.textAlign = 'center';
        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
        this.ctx.shadowBlur = 3;

        const partieText = this.showingBonus && this.currentPartie < this.phaseData.parties.length
            ? ` - ${this.phaseData.parties[this.currentPartie].id}`
            : '';
        this.ctx.fillText(`LE MUR d'avare\\rit${partieText}`, this.canvas.width / 2, 40);
        this.ctx.shadowBlur = 0;
    }

    // Dessiner le mur dans la mer avec destruction progressive
    drawSeaWall() {
        const centerX = this.canvas.width / 2;
        const seaLevel = this.canvas.height * 0.7;

        // Progression de la destruction selon la partie actuelle
        const destructionProgress = this.showingBonus ? (this.currentPartie / this.phaseData.parties.length) : 0;
        const isEpilogue = this.showingBonus && this.currentPartie === this.phaseData.parties.length - 1;

        // Hauteur du mur qui diminue
        const murHeight = 100 * (1 - destructionProgress * 0.7);
        const murWidth = 6 * (1 - destructionProgress * 0.3);

        // Le mur - avec fissures selon la progression
        this.ctx.fillStyle = `rgba(47, 79, 79, ${1 - destructionProgress * 0.5})`;
        this.ctx.fillRect(centerX - murWidth/2, seaLevel - murHeight, murWidth, murHeight);

        // Fissures du mur (plus il y en a, plus le mur est d√©truit)
        if (destructionProgress > 0.2) {
            this.ctx.strokeStyle = `rgba(139, 69, 19, ${destructionProgress})`;
            this.ctx.lineWidth = 2;

            for (let i = 0; i < Math.floor(destructionProgress * 8); i++) {
                const y = seaLevel - murHeight + (i * murHeight / 8);
                this.ctx.beginPath();
                this.ctx.moveTo(centerX - murWidth/2, y);
                this.ctx.lineTo(centerX + murWidth/2, y + Math.sin(y * 0.1) * 5);
                this.ctx.stroke();
            }
        }

        // Reflet du mur dans l'eau (s'estompe avec la destruction)
        if (destructionProgress < 0.8) {
            this.ctx.globalAlpha = 0.3 * (1 - destructionProgress);
            this.ctx.fillRect(centerX - murWidth/2, seaLevel, murWidth, 80 * (1 - destructionProgress));
            this.ctx.globalAlpha = 1;
        }

        // Particules de destruction qui tombent
        if (destructionProgress > 0.4) {
            this.drawDestructionParticles(centerX, seaLevel, destructionProgress);
        }

        // Pont d'or qui appara√Æt lors de l'√©pilogue
        if (isEpilogue) {
            this.drawGoldenBridge(centerX, seaLevel);
        }

        // Vagues anim√©es (plus agit√©es quand le mur se d√©truit)
        this.drawWaves(seaLevel, destructionProgress);
    }

    // Dessiner les particules de destruction
    drawDestructionParticles(centerX, seaLevel, progress) {
        const particleCount = Math.floor(progress * 10);

        for (let i = 0; i < particleCount; i++) {
            const x = centerX + (Math.random() - 0.5) * 40;
            const y = seaLevel - 50 + Math.random() * 100;
            const size = Math.random() * 3 + 1;

            this.ctx.fillStyle = `rgba(139, 69, 19, ${Math.random() * progress})`;
            this.ctx.beginPath();
            this.ctx.arc(x, y, size, 0, Math.PI * 2);
            this.ctx.fill();
        }
    }

    // Dessiner le pont d'or de l'√©pilogue
    drawGoldenBridge(centerX, seaLevel) {
        const bridgeY = seaLevel - 40;
        const bridgeWidth = this.canvas.width * 0.8;
        const bridgeHeight = 8;

        // Pont principal avec d√©grad√© dor√©
        const gradient = this.ctx.createLinearGradient(centerX - bridgeWidth/2, bridgeY, centerX + bridgeWidth/2, bridgeY);
        gradient.addColorStop(0, 'rgba(255, 215, 0, 0.3)');
        gradient.addColorStop(0.5, 'rgba(255, 215, 0, 0.9)');
        gradient.addColorStop(1, 'rgba(255, 215, 0, 0.3)');

        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(centerX - bridgeWidth/2, bridgeY, bridgeWidth, bridgeHeight);

        // Piliers du pont
        for (let i = 0; i < 5; i++) {
            const pilierX = centerX - bridgeWidth/2 + (i * bridgeWidth/4);
            this.ctx.fillStyle = 'rgba(255, 215, 0, 0.7)';
            this.ctx.fillRect(pilierX - 2, bridgeY, 4, seaLevel - bridgeY);
        }

        // Particules dor√©es qui scintillent
        for (let i = 0; i < 8; i++) {
            const x = centerX - bridgeWidth/2 + Math.random() * bridgeWidth;
            const y = bridgeY + Math.random() * 20 - 10;
            const size = Math.random() * 2 + 1;

            this.ctx.fillStyle = `rgba(255, 215, 0, ${Math.random() * 0.8 + 0.2})`;
            this.ctx.beginPath();
            this.ctx.arc(x, y, size, 0, Math.PI * 2);
            this.ctx.fill();
        }
    }

    // Dessiner les vagues (plus agit√©es quand le mur se d√©truit)
    drawWaves(seaLevel, destructionProgress = 0) {
        this.ctx.strokeStyle = '#ffffff';
        this.ctx.lineWidth = 2;
        this.ctx.globalAlpha = 0.6;

        // Les vagues deviennent plus agit√©es avec la destruction
        const agitation = 1 + destructionProgress * 2;

        for (let i = 0; i < 3; i++) {
            this.ctx.beginPath();
            for (let x = 0; x <= this.canvas.width; x += 10) {
                const baseY = seaLevel + Math.sin((x * 0.01) + this.waveAnimation + (i * 0.5)) * (8 - i * 2);
                const y = baseY + Math.sin((x * 0.02) + this.waveAnimation * 2) * destructionProgress * 5;

                if (x === 0) {
                    this.ctx.moveTo(x, y);
                } else {
                    this.ctx.lineTo(x, y);
                }
            }
            this.ctx.stroke();
        }
        this.ctx.globalAlpha = 1;
    }

    // Mise √† jour de la phase bonus
    update() {
        if (!this.initialized) return;

        // Dessiner le fond
        this.setupCanvas();

        if (this.showingBonus) {
            this.updateBonusPoem();
        } else {
            this.drawWaitingState();
        }
    }

    updateBonusPoem() {
        // Mettre √† jour l'animation du texte
        const isAnimating = this.textAnimator.update();

        // Dessiner le texte de la partie actuelle
        this.drawPoemText();

        // V√©rifier si il faut passer √† la partie suivante
        const partieElapsed = Date.now() - this.partieStartTime;

        // Dur√©e sp√©ciale pour l'√©pilogue (plus long)
        const currentDuration = (this.currentPartie === this.phaseData.parties.length - 1) ? 12000 : this.partieDuration;

        if (partieElapsed > currentDuration && !isAnimating) {
            this.currentPartie++;

            if (this.currentPartie < this.phaseData.parties.length) {
                // Pause de 1 seconde entre les parties
                setTimeout(() => {
                    this.startCurrentPartie();
                }, 1000);
            } else {
                // Toutes les parties termin√©es
                this.completeBonus();
            }
        }
    }

    drawPoemText() {
        const text = this.textAnimator.currentText;
        const lines = text.split('\n');

        // Configuration du texte
        this.ctx.fillStyle = '#ffffff';
        this.ctx.font = '16px serif';
        this.ctx.textAlign = 'center';

        // Ombre pour la lisibilit√©
        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
        this.ctx.shadowBlur = 2;
        this.ctx.shadowOffsetX = 1;
        this.ctx.shadowOffsetY = 1;

        // Position et espacement
        const lineHeight = 22;
        const startY = this.canvas.height * 0.15;
        const maxWidth = this.canvas.width * 0.8;

        // Dessiner chaque ligne
        lines.forEach((line, index) => {
            if (line.trim()) {
                const y = startY + (index * lineHeight);

                // Titre en plus grand
                if (line === 'LE MUR DANS LA MER') {
                    this.ctx.font = 'bold 20px serif';
                    this.ctx.fillStyle = '#ffd700';
                } else {
                    this.ctx.font = '16px serif';
                    this.ctx.fillStyle = '#ffffff';
                }

                // G√©rer les lignes trop longues
                if (this.ctx.measureText(line).width > maxWidth) {
                    const words = line.split(' ');
                    let currentLine = '';
                    let currentY = y;

                    words.forEach(word => {
                        const testLine = currentLine + (currentLine ? ' ' : '') + word;
                        if (this.ctx.measureText(testLine).width > maxWidth && currentLine) {
                            this.ctx.fillText(currentLine, this.canvas.width / 2, currentY);
                            currentLine = word;
                            currentY += lineHeight;
                        } else {
                            currentLine = testLine;
                        }
                    });

                    if (currentLine) {
                        this.ctx.fillText(currentLine, this.canvas.width / 2, currentY);
                    }
                } else {
                    this.ctx.fillText(line, this.canvas.width / 2, y);
                }
            }
        });

        // R√©initialiser l'ombre
        this.ctx.shadowBlur = 0;
        this.ctx.shadowOffsetX = 0;
        this.ctx.shadowOffsetY = 0;
    }

    drawWaitingState() {
        // √âtat d'attente - pas de message affich√©
        // La phase bonus sera g√©r√©e par le menu principal
        return;
    }

    completeBonus() {
        this.showingBonus = false;
        console.log('Phase Bonus - √âpilogue termin√©');

        // Message de fin
        const message = document.querySelector('.message');
        if (message) {
            message.innerHTML = `
                <div style="text-align: center; background: linear-gradient(135deg, #2E8B57, #3CB371); padding: 20px; border-radius: 10px;">
                    <h3 style="margin-bottom: 15px; color: #ffffff;">üåä Merci d'avoir lu üåä</h3>
                    <p style="color: #f0fff0; margin-bottom: 15px;">
                        "Car l'eau finit toujours par user la pierre,<br>
                        et la libert√©, t√¥t ou tard, reprendra son chemin."
                    </p>
                    <p style="color: #87CEEB; font-style: italic; margin-bottom: 15px;">
                        ‚Äî Dreamer Unisona
                    </p>
                    <p style="color: #ffd700; font-size: 14px;">
                        ‚ú® Fin de Voir la V√©rit√© ‚ú®
                    </p>
                    <button class="message-button" onclick="window.gameManager.restart()"
                            style="background: linear-gradient(145deg, #4169E1, #1E90FF); margin-top: 15px;">
                        Recommencer le voyage
                    </button>
                </div>
            `;
            message.style.display = 'block';
        }
    }

    /**
     * R√©compense pour avoir termin√© le jeu
     */
    rewardCompletion() {
        const rewardAmount = 200;

        try {
            let mainAngel = null;

            if (window.angel) {
                mainAngel = window.angel;
            } else if (window.gameManager && window.gameManager.angel) {
                mainAngel = window.gameManager.angel;
            } else if (window.modules && window.modules.angel) {
                mainAngel = window.modules.angel;
            } else if (this.gameState && this.gameState.angel) {
                mainAngel = this.gameState.angel;
            }

            if (mainAngel && typeof mainAngel.gainExp === 'function') {
                const result = mainAngel.gainExp(rewardAmount);
                console.log(`üåü XP bonus fin de jeu: +${rewardAmount} XP (niveau: ${result.currentLevel}, total: ${result.currentExp})`);
                return true;
            } else {
                console.log(`‚ö†Ô∏è Impossible de trouver l'ange principal pour le bonus de fin`);
                return false;
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du bonus XP fin de jeu:', error);
            return false;
        }
    }

    // Nettoyage
    cleanup() {
        console.log('Phase Bonus - Nettoyage');
        const message = document.querySelector('.message');
        if (message) {
            message.style.display = 'none';
        }
    }
}

// Export du module
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PhaseBonusMur;
} else {
    window.PhaseBonusMur = PhaseBonusMur;
}